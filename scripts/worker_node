#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from queue import Queue
from threading import Thread

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest
from ipfs_common.ipfs_rosbag import IpfsRosBag

# This package
from offsetting_agent.contracts import VCU
from offsetting_agent.footprint import offset_footprint

class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)

        rospy.wait_for_service('/liability/finish')
        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('/liability/start', StartLiability),
                                          rospy.ServiceProxy('/liability/finish', FinishLiability))
        rospy.loginfo('Worker node launched.')

    def on_new_liability(self, msg):
        rospy.loginfo("Got new liability %s", msg.address)
        self.subscribe_and_start(msg)

    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')

        bag = IpfsRosBag(multihash=liability.objective)
        objective = bag.messages

        self.current_liability = liability
        prefix = '/liability/eth_' + liability.address.address
        self.pub_volume = rospy.Publisher("/offset", String, queue_size=128)
        self.pub_token = rospy.Publisher("/offset_token", String, queue_size=128)
        self.pub_account = rospy.Publisher("/account", String, queue_size=128)
        self.pub_country = rospy.Publisher("/country", String, queue_size=128)
        self.pub_factor = rospy.Publisher("/factor", String, queue_size=128)
        self.pub_consumed = rospy.Publisher("/consumed", String, queue_size=128)
        self.pub_tx = rospy.Publisher("/tx", String, queue_size=128)
        self.liability_proxy.start(liability.address)

        Thread(target=self.work, args=(objective, ), daemon=True).start()

    def spin(self):
        rospy.spin()

    def work(self, objective):
        """Objective: cumulative_consumption, geo
        """
        rospy.loginfo('Starting new job...')
        rospy.loginfo("Objective {}".format(objective))

        country = objective['/geo'][0].data
        power = objective['/power_kwh'][0].data

        rospy.loginfo('Offsetting {} from {}'.format(power, country))
        factor = get_emission_factor(country)
        offsetted, tx = offset_footprint(power, country)

        self.pub_volume.publish(String(str(offsetted)))
        self.pub_token.publish(String(str(VCU.address)))
        self.pub_account.publish(String(self.current_liability.promisee.address))
        self.pub_country.publish(String(country))
        self.pub_factor.publish(String(str(factor)))
        self.pub_consumed.publish(String(str(power)))
        self.pub_tx.publish(String(str(tx)))

        rospy.sleep(2)

        self.liability_proxy.finish(self.current_liability.address, True)

        self.pub_token.unregister()
        self.pub_volume.unregister()
        self.pub_account.unregister()
        self.pub_factor.unregister()
        self.pub_consumed.unregister()
        self.pub_tx.unregister()
        rospy.loginfo('Done!')


if __name__ == '__main__':
    WorkerNode().spin()
