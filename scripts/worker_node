#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from queue import Queue
from threading import Thread
from web3 import Web3, HTTPProvider

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest
from ipfs_common.bag import Bag
from ethereum_common.eth_keyfile_helper import KeyfileHelper

# This package
from complier_service.contracts import COMPLIER, VCU

keyfile = '/var/lib/liability/keyfile'
keyfile_password_file = '/var/lib/liability/keyfile-psk'
web3_http_provider = 'https://sidechain.aira.life/rpc'


class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)

        rospy.wait_for_service('liability/finish')
        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))
        rospy.loginfo('Worker node launched.')

    def on_new_liability(self, msg):
        rospy.loginfo("Got new liability %s", msg.address)
        self.subscribe_and_start(msg)

    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')

        objective = Bag(multihash=liability.objective)

        self.current_liability = liability
        self.liability_proxy.start(liability.address.address)

        Thread(target=self.work, args=(objective,), daemon=True).start()

    def spin(self):
        rospy.spin()

    def work(self, objective):
        """Objective: cumulative_consumption, geo
        """
        rospy.loginfo('Starting new job...')

        rospy.loginfo('Offsetting ', objective.messages['cumulative_consumption_wh'], ' from ', objective.messages['geo'])
        offset_footprint(objective.messages['cumulative_consumption_wh'], objective.messages['geo'])

        self.liability_proxy.finish(self.current_liability.address.address, True)
        rospy.loginfo('Done!')


if __name__ == '__main__':
    WorkerNode().spin()
