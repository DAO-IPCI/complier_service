#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third Party
from threading import Thread

# ROS
import rospy

# Robonomics communication
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash


class TraderNode:
    def __init__(self):
        rospy.init_node('trader')
        rospy.loginfo('Launching trader node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts)) # AIRA ethereum addresses

        self.signing_demand = rospy.Publisher('/liability/infochan/eth/signing/demand', Demand, queue_size=128)
        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        #rospy.Timer(rospy.Duration(int(rospy.get_param('~order_lifetime'))*15), self.pub_offers)
        rospy.Timer(rospy.Duration(10), self.pub_offers)

        rospy.loginfo('Trader node launched.')

    def pub_offers(self, event):
        objective = Multihash(multihash=rospy.get_param('~objective'))
        price = UInt256(uint256=str(rospy.get_param('~price')))
        self.make_offer(objective, price)

    def make_offer(self, objective, cost):
        def get_deadline():
            lifetime = int(rospy.get_param('~order_lifetime'))
            deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)().number + lifetime
            return str(deadline)

        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash()
        offer.model.multihash = rospy.get_param('~model')
        offer.objective = objective
        offer.token = Address()
        offer.token.address = rospy.get_param('~token')
        offer.cost = cost
        offer.lighthouse = Address()
        offer.lighthouse.address = rospy.get_param('~lighthouse')
        offer.validator = Address()
        offer.validator.address = '0x0000000000000000000000000000000000000000'
        offer.lighthouseFee = UInt256()
        offer.lighthouseFee.uint256 = '0'
        offer.deadline = UInt256()
        offer.deadline.uint256 = get_deadline()

        self.signing_offer.publish(offer)
        rospy.loginfo(offer)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    TraderNode().spin()
