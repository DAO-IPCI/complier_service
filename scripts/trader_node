#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third Party
from threading import Thread

# ROS
import rospy

# Robonomics communication
from robonomics_msgs.msg import Offer, Demand
from ethereum_common.msg import Address, UInt256
from ethereum_common.srv import Accounts, BlockNumber
from ipfs_common.msg import Multihash

from complier_service.ipfs_utils import ipfs_download
from complier_service.footprint import get_emission_factor, calc_footprint


class TraderNode:
    def __init__(self):
        rospy.init_node('trader')
        rospy.loginfo('Launching trader node...')

        rospy.wait_for_service('/eth/current_block')
        rospy.wait_for_service('/eth/accounts')
        self.accounts = rospy.ServiceProxy('/eth/accounts', Accounts)()
        rospy.loginfo(str(self.accounts)) # AIRA ethereum addresses

        rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)

        self.signing_offer = rospy.Publisher('/liability/infochan/eth/signing/offer', Offer, queue_size=128)

        rospy.loginfo('Trader node is ready!')

    def on_incoming_demand(self, demand: Demand):
        rospy.loginfo('Incoming demand...\n{}'.format(demand))
        if (demand.model.multihash == rospy.get_param('~model') and demand.token.address == rospy.get_param('~token')):
            rospy.loginfo('For my model and token!')
            if demand.cost.uint256 == '0':      # Calculate the price and publish offer
                price = self.calculate_price(demand.objective)
            else:
                price = demand.cost

            self.make_offer(demand.objective, price)
        else:
            rospy.loginfo('It does not fit my model or token, skip it.')

    def calculate_price(self, objective: Multihash) -> Uint256:
        items = ipfs_download(objective)

        emission_factor = get_emission_factor(items['/geo'])
        price = calc_footprint(items['/power_mwh'], emission_factor)  ## TODO
        return UInt256(str(price))

    def get_deadline() -> UInt256:
        lifetime = int(rospy.get_param('~order_lifetime'))
        deadline = rospy.ServiceProxy('/eth/current_block', BlockNumber)().number + lifetime
        return UInt256(str(deadline))

    def make_offer(self, objective: Multihash, cost: UInt256):
        rospy.loginfo('Making offer...')

        offer = Offer()
        offer.model = Multihash()
        offer.model.multihash = rospy.get_param('~model')
        offer.objective = objective
        offer.token = Address()
        offer.token.address = rospy.get_param('~token')
        offer.cost = cost
        offer.lighthouse = Address()
        offer.lighthouse.address = rospy.get_param('~lighthouse')
        offer.validator = Address()
        offer.validator.address = '0x0000000000000000000000000000000000000000'
        offer.lighthouseFee = UInt256()
        offer.lighthouseFee.uint256 = '0'
        offer.deadline = self.get_deadline()

        self.signing_offer.publish(offer)
        rospy.loginfo(offer)

    def spin(self):
        rospy.spin()

if __name__ == '__main__':
    TraderNode().spin()
